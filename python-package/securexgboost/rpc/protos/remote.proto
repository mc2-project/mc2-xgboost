// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "ndarray.proto";

package remote;

// Interface exported by the server.
service Remote {
  // Get attestation report
  // Status is a just a dummy argument and won't be used by the server
  rpc rpc_get_remote_report_with_pubkey(Status) returns (Report) {}

  // Send symmetric key encrypted with enclave public key, signature
  rpc rpc_add_client_key(DataMetadata) returns (StatusMsg) {}

  // Send symmetric key encrypted with enclave public key, signature, certificate
  rpc rpc_add_client_key_with_certificate(DataMetadata) returns (StatusMsg) {}

  // Send params of a DMatrix to the server for initialization
  // Returns the name assigned to this DMatrix
  rpc rpc_XGDMatrixCreateFromEncryptedFile(DMatrixAttrs) returns (Name) {}

  // Send params of a Booster to the server for initialization 
  // Returns the name assigned to this booster
  rpc rpc_XGBoosterCreate(BoosterAttrs) returns (Name) {}

  // Set booster parameters
  rpc rpc_XGBoosterSetParam(BoosterParam) returns (StatusMsg) {}

  // Update the booster for one round
  rpc rpc_XGBoosterUpdateOneIter(BoosterUpdateParams) returns (StatusMsg) {}

  // Run predictions
  rpc rpc_XGBoosterPredict(PredictParams) returns (Predictions) {}

  // Save model to a file on the server
  rpc rpc_XGBoosterSaveModel(SaveModelParams) returns (StatusMsg) {}

  // Load model from file on the server
  rpc rpc_XGBoosterLoadModel(LoadModelParams) returns (StatusMsg) {}

  // Dump model 
  rpc rpc_XGBoosterDumpModelEx(DumpModelParams) returns (Dump) {}

  // Dump model with features
  rpc rpc_XGBoosterDumpModelExWithFeatures(DumpModelWithFeaturesParams) returns (Dump) {}

  // Save model to buffer
  rpc rpc_XGBoosterGetModelRaw(ModelRawParams) returns (Dump) {}

  // Get number of columns in the DMatrix
  rpc rpc_XGDMatrixNumCol(Name) returns (Integer) {}

  // Get number of rows in the DMatrix
  rpc rpc_XGDMatrixNumRow(Name) returns (Integer) {}
}

message StatusMsg {
    // Status
    Status status = 1;
}

// Current status of the node
message Status {
  // Status
  int32 status = 1;

  // Exception message
  string exception = 2;
}

// A report returned by the enclave for attestation 
message Report {
  // Public key of enclave 
  numproto.protobuf.NDArray pem_key = 1;

  // Size of public key
  uint32 key_size = 2;

  // Remote report of enclave
  numproto.protobuf.NDArray remote_report = 3;

  // Size of remote report
  uint32 remote_report_size = 4;

  // Status of call
  Status status = 5;
}

// Message from client to enclaves with information on how to retrieve
// training/test data
message DataMetadata {
  // Symmetric key used to encrypt data file, encrypted with
  // enclave public key
  numproto.protobuf.NDArray enc_sym_key = 1;

  // Length of sym_key
  uint32 key_size = 2;

  // Signature over encrypted symmetric key, signed with client private key
  numproto.protobuf.NDArray signature = 3;

  // Length of signature
  uint32 sig_len = 4;

  // Certificate
  string certificate = 5;
}

// Params for the constructor of a DMatrix
message DMatrixAttrs {
    repeated string filenames = 1;
    repeated string usernames = 2;
    uint32 silent = 3;
    string username = 4;
}

// Params for the constructor of a Booster
message BoosterAttrs {
    repeated string cache = 1;
    uint64 length = 2;
    string username = 3;
}

// Booster parameter
message BoosterParam {
    string booster_handle = 1;
    string key = 2;
    string value = 3;
    string username = 4;
}

// Params for training
message BoosterUpdateParams {
    string booster_handle = 1;
    string dtrain_handle = 2;
    uint32 iteration = 3;
    string username = 4;
}

// Params for eval
message BoosterEvalSetParams {
    string handle = 1;
    repeated Pair evals = 2;
    uint32 iteration = 3;
    string username = 4;
}

// Params for prediction
message PredictParams {
    string booster_handle = 1;
    string dmatrix_handle = 2;
    uint32 option_mask  = 3;
    uint32 ntree_limit = 4;
    string username = 5;
}

// Params for save model
message SaveModelParams {
    string booster_handle = 1;
    string filename = 2;
    string username = 3;
}

// Params for load model
message LoadModelParams {
    string booster_handle = 1;
    string filename = 2;
    string username = 3;
}

// Params for dump model
message DumpModelParams {
    string booster_handle = 1;
    string fmap = 2;
    uint32 with_stats = 3;
    string dump_format = 4;
    string username = 5;
}

// Params for dump model with features
message DumpModelWithFeaturesParams {
    string booster_handle = 1;
    uint32 flen = 2;
    repeated string fname = 3;
    repeated string ftype = 4;
    uint32 with_stats = 5;
    string dump_format = 6;
    string username = 7;
}

// Params for dump model
message ModelRawParams {
    string booster_handle = 1;
    string username = 2;
}

// Model dump
message Dump {
    repeated string sarr = 1;
    uint64 length = 2;
    Status status = 3;
}

// Pair of strings
message Pair {
    string x = 1;
    string y = 2;
}

// Object handle
// FIXME: username not required for all names
// FIXME: status only required for returned values
message Name {
    // Name that the server assigned the handle
    string name = 1;
    string username = 2;
    // Status of call (for returned Name)
    Status status = 3;
}

// Integer
message Integer {
    uint32 value = 1;
    // Status of call (for returned Integer)
    Status status = 2;
}

// Encrypted predictions served by enclave, to be decrypted at client
message Predictions {
    // Encrypted predictions
    numproto.protobuf.NDArray predictions = 1;

    // Length of predictions
    uint32 num_preds = 2;

    // Status
    Status status = 3;
}

// Params for distributed training
message ClusterParams {
    // Number of nodes in cluster
    uint32 num_workers = 1;  
}
